```{r}
#| echo: false

if (file.exists(here::here("report/Tables"))) {
  all_files <- list.files(here::here("report/Tables"), full.names = TRUE)
  all_rda_files <- all_files[grep(".rda", all_files)]
  for (a in 1:length(all_rda_files)) {
    load(all_rda_files[a])
  }
  
  # process all executive summary tables
  catches_es_table <- catches_es$table
  catches_es_cap <- catches_es$cap
  rm(catches_es)
  
  ssb_es_table <- ssb_es$table
  ssb_es_cap <- ssb_es$cap
  ssb_es_cap <- gsub("fraction unfished", "fraction of unfished spawning output", ssb_es_cap)
  rm(ssb_es)
  
  spr_es_table <- spr_es$table
  spr_es_cap <- spr_es$cap
  rm(spr_es)
  
  recr_es_table <- recr_es$table
  recr_es_cap <- recr_es$cap
  rm(recr_es)
  
  reference_points_table <- reference_points$table
  reference_points_cap <- reference_points$cap
  rm(reference_points)
  
  recent_management_table <- recent_management$table
  recent_management_cap <- recent_management$cap
  rm(recent_management)
    
  projections_table <- projections$table
  projections_cap <- projections$cap
  projections_cap <- gsub("fraction unfished", "fraction of unfished spawning output", projections_cap)
  rm(projections)
  
  compweight_table <- table_compweight$table
  compweight_cap <- table_compweight$cap
  rm(table_compweight)
  
  config_table <- table_config$table
  config_cap <- table_config$cap
  rm(table_config)
  
  parcount_table <- table_parcounts$table
  parcount_cap <- table_parcounts$cap
  rm(table_parcounts)
  
  pars_table <- table_pars$table
  pars_cap <- table_pars$cap
  rm(table_pars)

  # table from r4ss::table_exec_summary()
  time_series_table <- time_series$table
  time_series_cap <- time_series$cap
  rm(time_series)

  time_series_table <- time_series_table |>
    dplyr::mutate(dplyr::across(dplyr::everything(), ~ dplyr::case_when(
      grepl("Spawning", dplyr::cur_column()) ~ round(.x, 2),
      grepl("Total", dplyr::cur_column()) ~ round(.x, 0),
      grepl("Fraction", dplyr::cur_column()) ~ round(.x, 3),
      grepl("Recruits", dplyr::cur_column()) ~ round(.x, 0),
      grepl("Mortality", dplyr::cur_column()) ~ round(.x, 0),
      TRUE ~ round(.x, 3)
    )))

  # table from r4ss::table_ts() (not used currently)
  ts_table <- table_ts$table
  ts_cap <- table_ts$cap
  rm(table_ts)

  eval_tables <- TRUE
} else {
  eval_tables <- FALSE
}
```


```{r}
#| echo: false
#| eval: true

# Special modification to the management and projection tables to add quantities
# from a sourced csv file in the skeleton r chunk.

  # GMT016 table is downloaded from https://reports.psmfc.org/pacfin
  GMT016 <- read.csv("../Data/Raw_not_confidential/GMT016-final specifications-.csv")
  # for Sablefish, es_10_years is defined in https://github.com/pfmc-assessments/sablefish_2025/blob/main/report/SAR_USWC_sablfefish_skeleton.qmd
  # shortcut here assuming recent_management_table is correct
  es_10_years <- recent_management_table$Year
  recent_management_table[, "OFL (mt)"] <- GMT016 |>
    dplyr::filter(SPECIFICATION_TYPE == "OFL", YEAR %in% es_10_years) |>
    dplyr::arrange(YEAR) |>
    dplyr::select(VAL)
  recent_management_table[, "ABC (mt)"] <- GMT016 |>
    dplyr::filter(SPECIFICATION_TYPE == "ABC", YEAR %in% es_10_years) |>
    dplyr::arrange(YEAR) |>
    dplyr::select(VAL)
  recent_management_table[, "ACL (mt)"] <- GMT016 |>
    dplyr::filter(SPECIFICATION_TYPE == "ACL", YEAR %in% es_10_years) |>
    dplyr::arrange(YEAR) |>
    dplyr::select(VAL)
  recent_management_table <- round(recent_management_table)
  
  projections_table[1:2, "Adopted OFL (mt)"] <- GMT016 |>
    dplyr::filter(SPECIFICATION_TYPE == "OFL", YEAR %in% projections_table$Year) |>
    dplyr::arrange(YEAR) |>
    dplyr::select(VAL)
  projections_table[1:2, "Adopted ACL (mt)"] <- GMT016 |>
    dplyr::filter(SPECIFICATION_TYPE == "ACL", YEAR %in% projections_table$Year) |>
    dplyr::arrange(YEAR) |>
    dplyr::select(VAL)
  
```

```{r}
#| echo: false
#| eval: true

decision_table_cap <- "Decision table with 10-year projections. 'Mgmt' refers to the two management scenarios (A) the default harvest control rule $P^* = 0.45$ and sigma = 0.5, (B) TODO: FILL IN HERE. In each case the 2025 and 2026 catches are fixed at estimates provided by the GMT. The alternative states of nature ('Low', 'Base', and 'High' as discussed in the text) are provided in the columns, with Spawning Output ('Spawn', in trillions of eggs) and Fraction of unfished spawning output ('Frac') provided for each state."

# # replace mod_out below with calls like
# mod_low_A <- SS_output(dir_low_A,
#     verbose = FALSE,
#     printstats = FALSE,
#     SpawnOutputLabel = "Spawning Output (trillions of eggs)"
# )

mod_low_A <- r4ss::SS_output(here::here("model_runs/6.26_lowR0_forecast"),    
  SpawnOutputLabel = "Spawning output (trillions of eggs)", printstats = FALSE, verbose = FALSE)
mod_low_B <- mod_out

mod_base_A <- mod_out
mod_base_B <- mod_out

mod_high_A <- r4ss::SS_output(here::here("model_runs/6.27_highR0_forecast"), 
  SpawnOutputLabel = "Spawning output (trillions of eggs)", printstats = FALSE, verbose = FALSE)
mod_high_B <- mod_out 

```