---
title: "Decision table showing OFLs for yellowtail rockfish"
author: "Kiva L. Oken and Ian G. Taylor" 
affiliation: 'NOAA Fisheries Northwest Fisheries Science Center, 2725 Montlake Blvd E, Seattle, WA 98112'
date: today
format: html
---

```{r}
#| label: read models and load table function
#| echo: false
#| warning: false
#| message: false
#| eval: true

# require packages
require(r4ss)
require(ggplot2)
require(dplyr)
require(tidyr)
require(gt)

# read model output [EDIT HERE and stuff at the very top]
mod_low_A <- r4ss::SS_output(here::here("model_runs/6.26_lowR0_forecast"), printstats = FALSE, verbose = FALSE)
mod_low_B <- r4ss::SS_output(here::here("model_runs/6.28_lowR0_forecast_avg_attain"), printstats = FALSE, verbose = FALSE)
mod_base_A <- r4ss::SS_output(here::here("model_runs/5.09_no_extra_SE"), printstats = FALSE, verbose = FALSE)
mod_base_B <- r4ss::SS_output(here::here("model_runs/6.30_base_forecast_avg_attain"), printstats = FALSE, verbose = FALSE)
mod_high_A <- r4ss::SS_output(here::here("model_runs/6.27_highR0_forecast"), printstats = FALSE, verbose = FALSE)
mod_high_B <- r4ss::SS_output(here::here("model_runs/6.29_highR0_forecast_avg_attain"), printstats = FALSE, verbose = FALSE)

# NO NEED TO EDIT BEYOND HERE UNLESS YOU HAVE 3 STATES OF NATURE

#' Format a decision table
#'
#' Format a decision table for its inclusion in a document.
#'
#' @param ... Each element provided in the call to this function that is not
#' assigned to a particular input argument should be a vector of file paths
#' to the models you want to read for a given column of your decision table.
#' For example, if a single column has results from three models and
#' if your decision table has a low and high state of nature, then
#' there should be two vectors passed via `...` and each vector would contain
#' paths to three different models.
#' The order of the vectors will be the column order from left to right.
#' The order of the models within a vector will be the row order.
#' @param years A vector of years you want catches for.
#' @template format
#' @param caption A character string that
#' will be passed to the `caption` parameter of [kableExtra::kbl].
#' The default value is `NULL`.
#' @param label A character string without underscores that
#' will be passed to the `label` parameter of [kableExtra::kbl].
#' The default value is `NULL`.
#' @param digits A vector of digits for catch, spawning output, and fraction,
#' unfished. It gets passed to `r4ss::SS_decision_table_stuff()`.
#' @export
#' @author Kelli F. Johnson, Ian G. Taylor, Chantel R. Wetzel
#' @examples
#' table_decision(
#'     list(mod.low.A, mod.base.A, mod.high.A),
#'     list(mod.low.B, mod.base.B, mod.high.B),
#'     list(mod.low.C, mod.base.C, mod.high.C)
#' )
table_decision_with_OFL <- function(
    ...,
    years = 2025:2036,
    digits = c(0, 0, 3)) {
    # gather models into a list
    mods <- list(...)

    # hardwired to prevent users from adding too-long inputs
    rowgroup <- c("A", "B", "C")

    # process output
    results <- purrr::modify_depth(
        mods,
        .depth = 2,
        .f = \(x) {
            r4ss::SS_decision_table_stuff(
                x,
                yrs = years,
                digits = digits,
                OFL = TRUE
            )
        }
    ) |>
        purrr::modify_depth(1, dplyr::bind_cols) |>
        dplyr::bind_rows(.id = "Mgmt") |>
        dplyr::mutate(
            Mgmt = rowgroup[as.numeric(Mgmt)],
            # Catch = pmax(na.rm = TRUE, !!!rlang::syms(grep(value = TRUE, "catch", names(.))))
        ) |>
        dplyr::rename(Year = "yr...1") |>
        dplyr::select(-dplyr::starts_with("yr"))

    # get the catch columns and warn if they aren't all equal
    # (simpler than trying to automatically italicize values associated
    # with mismatched catch which had issues for lingcod)
    catch_cols <- results |> dplyr::select(dplyr::starts_with("catch"))
    if (max(abs(apply(catch_cols, 1, sd))) > 0.01) {
        warning(
            "Catch differs among columns, perhaps due to a crashed model without enough biomass."
        )
    }

    # clean up column names and remove extra catch columns
    # first rename the first catch column
    results <- results |>
        dplyr::rename(Catch = "catch...2") |>
        dplyr::select(-dplyr::starts_with("catch", ignore.case = FALSE))

    # add column names
    rownames(results) <- NULL
    # note: column names could be modified to include informative descriptions
    colnames(results) <- c(
        "Mgmt",
        "Year",
        "Catch",
        "Low Spawn",
        "Low Frac",
        "Base Spawn",
        "Base Frac",
        "High Spawn",
        "High Frac"
    )

    # replace spawning output with OFL
    colnames(results) <- gsub("Spawn", "OFL", colnames(results))
    return(results)
}


#' Format Decision Table for HTML Output
#'
#' This function formats a decision table for HTML display using the `gt` package.
#' It removes repeated labels in the "Mgmt" column, sets font size, table width, and font family.
#'
#' @param results A data frame containing the decision table to be formatted.
#'
#' @return A `gt` table object formatted for HTML output.
#'
#' @examples
#' \dontrun{
#' formatted_table <- format_decision_table_for_html(results)
#' }
#'
#' @import dplyr
#' @import gt
format_decision_table_for_html <- function(results) {
    # remove repeated lables in Mgmt column
    results |>
        dplyr::mutate(Mgmt = ifelse(duplicated(Mgmt), "", Mgmt)) |>
        gt::gt() |>
        gt::tab_options(
            table.font.size = gt::px(11),
            table.width = gt::pct(90),
            table.font.names = "Arial"
        )
}

#' Create a time series figure of OFL values for each state of nature
#'
#' This function generates a ggplot figure showing the time series of Overfishing Limit (OFL) values
#' for each state of nature ("High OFL", "Base OFL", "Low OFL") and the catch used in all states.
#' The input table is reshaped and filtered by management stream, then plotted with distinct colors and shapes
#' for each state.
#'
#' @param table A data frame containing columns: `Mgmt`, `Catch`, `Year`, `Low OFL`, `Base OFL`, `High OFL`.
#'
#' @return A ggplot object displaying the time series of OFL and catch values by state of nature.
#'
#' @import dplyr
#' @import tidyr
#' @import ggplot2
#'
#' @examples
#' \dontrun{
#' make_ofl_figure(my_decision_table)
#' }
# make figure of timeseries of OFL values for each state of nature
make_ofl_figure <- function(table, stream = "A") {
    table_long <- table |>
        dplyr::select(Mgmt, Catch, Year, `Low OFL`, `Base OFL`, `High OFL`) |>
        tidyr::pivot_longer(
            cols = c(Catch, `Low OFL`, `Base OFL`, `High OFL`),
            names_to = "State",
            values_to = "OFL"
        ) |>
        dplyr::mutate(State = factor(State,
            levels = c("High OFL", "Base OFL", "Low OFL", "Catch"),
            labels = c(
                "OFL from High State",
                "OFL from Base",
                "OFL from Low State",
                "Catch used in all states"
            )
        ))
    table_long |>
        dplyr::filter(Mgmt == stream) |>
        ggplot(aes(x = Year, y = OFL, color = State, shape = State)) +
        geom_line(linewidth = 1.5) +
        geom_point(size = 3) +
        scale_color_manual(
            values = c(
                "OFL from High State" = "darkolivegreen4",
                "OFL from Base" = "blue",
                "OFL from Low State" = "brown4",
                "Catch used in all states" = "black"
            )
        ) +
        scale_shape_manual(
            values = c(
                "OFL from High State" = 16, # solid circle
                "OFL from Base" = 17, # solid triangle
                "OFL from Low State" = 15, # solid square
                "Catch used in all states" = NA # no points, just line
            )
        ) +
        labs(
            x = "Year",
            y = "OFL or catch (mt)",
            color = "State",
            shape = "State"
        ) +
        theme_classic() +
        scale_y_continuous(limits = c(0, NA), expand = expansion(mult = c(0, 0.05)))
}
```

```{r}
#| label: create decision table
#| echo: false
#| warning: false
#| message: false
#| eval: true
#| tbl-cap: Decision table showing estimated OFL values for the three states of nature.

# call the function defined above
table <- table_decision_with_OFL(
    list(mod_low_A, mod_base_A, mod_high_A),
    list(mod_low_B, mod_base_B, mod_high_B)
    #  list(mod_low_C, mod_base_C, mod_high_C),
)
table |> format_decision_table_for_html()

```

```{r}
#| label: create figures
#| echo: false
#| warning: false
#| message: false
#| eval: true

# make ggplot figure showing the values in the "Low OFL", "Base OFL", and "High OFL" columns
for (stream in unique(table$Mgmt)) {
    make_ofl_figure(table, stream)
    ggsave(paste0("OFL_timeseries_for_states_of_nature_stream_", stream, ".png"), width = 7, height = 5)
}
```
